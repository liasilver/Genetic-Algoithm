import pandas as pd
from datetime import datetime, timedelta
import genetics
import numpy as np

import googleMaps
import map

mates = False
cross = False
fit = True
show_map = False

# read file in
#df1 = pd.read_csv(r"C:\Users\Lia\Desktop\tobiDataTime.csv")  # run this for PC
df1 = pd.read_csv(r"/Users/liasilver/Desktop/tobiData.csv")  # run this for MAC
df = df1.replace(np.nan, '', regex=True)

utc_pop = []
for i in range(len(df.index)):
    gene = []
    for j in range(9):  # 9 digits per genes
        gene.append(df.loc[i][j])
    if gene[1]:
        utc_pop.append(gene)
#  initial_pop.remove(initial_pop[0])

# time conversion
hours_less = 4
initial_pop = []
print_utc = []
for i in range(len(utc_pop)):
    utcTime = datetime(year=1, month=1, day=1, hour=(int(utc_pop[i][1].split(":")[0])),
                       minute=(int(utc_pop[i][1].split(":")[1])))

    if int(utcTime.strftime("%H:%M:%S").split(":")[0]) > 4:
        nycTime = utcTime - timedelta(hours=hours_less)
        utc_pop[i][1] = nycTime.strftime("%H:%M:%S")
        initial_pop.append(utc_pop[i])


if mates:
    genetics.find_mates(initial_pop[40], initial_pop, mates)

# filler for halving pop. by fitness


parents = []
i = 0
for i in range(round(len(initial_pop)/2)):
    parents.append(initial_pop[i])

offspring = genetics.crossover(parents, cross)
if cross:
    count = 0
    for c in range(len(offspring)):
        for g in range (len(offspring[c])):
            count+=1
    print("total population:", count)

if fit:
    genetics.calc_fitness(offspring, fit)

