import pandas as pd
from datetime import datetime, timedelta
import genetics
import numpy as np
import map

mates = False
assign = False
fit = False
show_map = True
algo = True

# read file in
# df1 = pd.read_csv(r"C:\Users\Lia\Desktop\tobiDataTime.csv")  # run this for PC
df1 = pd.read_csv(r"/Users/liasilver/Desktop/tobiDataTime.csv")  # run this for MAC
df = df1.replace(np.nan, '', regex=True)

utc_pop = []
for i in range(len(df.index)):
    gene = []
    for j in range(9):  # 9 digits per genes
        gene.append(df.loc[i][j])
    if gene[1]:
        utc_pop.append(gene)
#  initial_pop.remove(initial_pop[0])

# time conversion
hours_less = 4
initial_pop = []
print_utc = []
for i in range(len(utc_pop)):
    utcTime = datetime(year=1, month=1, day=1, hour=(int(utc_pop[i][1].split(":")[0])),
                       minute=(int(utc_pop[i][1].split(":")[1])))

    if int(utcTime.strftime("%H:%M:%S").split(":")[0]) > 4:
        nycTime = utcTime - timedelta(hours=hours_less)
        utc_pop[i][1] = nycTime.strftime("%H:%M:%S")
        initial_pop.append(utc_pop[i])

if mates:
    genetics.find_mates(['94934', '13:00:00', 40.68579, -73.7145, 40.66357, -73.6982, 3294.0, 479.0, 0.0], initial_pop, mates)

# filler for halving pop. by fitness
parents = []
i = 0
for i in range(round(len(initial_pop) / 2)):
    parents.append(initial_pop[i])
#parents is an array of all trips
#offspring = genetics.assign_trips(parents, assign)
# if assign:
#     count = 0
#     for c in range(len(offspring)):
#         for g in range (len(offspring[c])):
#             count+=1
#     print("total population:", count)
# if fit:
#     print(genetics.get_fitness(offspring[1], fit=False))
#         #print("driver" + i + "fitness:" + str(genetics.get_fitness(offspring[i], fit=False)))
#


# map.cached_timedistance((40.81399,-73.66153), (40.70436,-73.40356))
population = genetics.algo(parents, algo)

#3, 15
#4,16
if show_map:
    lat, lon = 40.7128, -73.8010
    map.chromsome_route(map.plot(lat,lon), population[0])
    print()
    print("MAPPED PARENT RUN")
    print(genetics.get_fitness(population[0], fit))

    map.chromsome_route(map.plot(lat, lon), population[12])
    print()
    print("MAPPED CHILD RUN")
    print(genetics.get_fitness(population[12], fit))


